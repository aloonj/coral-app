# Google OAuth Fix: Add to your existing Nginx configuration

# Add this to the server block in your Nginx configuration
# This special directive forces a retry on Google callback URLs that would result in 404

# Temporary fix for Google OAuth callback 404 issue
error_page 404 = @oauth_retry;

# Handle OAuth callback URLs that initially return 404
location @oauth_retry {
    # Only retry Google callback URLs
    if ($request_uri ~ "/api/auth/google/callback") {
        # Add a query parameter to force a new request
        rewrite ^(.*)$ $1?retry=$msec break;
        # Proxy to the backend with the rewritten URL
        proxy_pass http://localhost:5001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Do not pass the request to the next handler
        break;
    }
    
    # For other 404s, just return the 404 response
    return 404;
}

# Special direct handling for Google OAuth callback URLs
location ~ ^/api/auth/google/callback {
    # Use a special proxy configuration for these URLs
    proxy_pass http://localhost:5001;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_no_cache 1;
    proxy_cache_bypass 1;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # Add explicit no-cache headers
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate" always;
    add_header Pragma "no-cache" always;
    expires off;
    
    # Enable response buffering to ensure complete responses
    proxy_buffering on;
}
